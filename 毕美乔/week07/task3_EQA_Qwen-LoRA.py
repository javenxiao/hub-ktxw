# -*- coding: utf-8 -*-
"""eqs_Qwen_LoRA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15gqZb0ovoMqSNIVBsFkq44D9p_iZCRtM
"""

from google.colab import drive
drive.mount('/content/drive/')

import pandas as pd
from datasets import Dataset
from transformers import (
    AutoTokenizer,
    AutoModelForCausalLM,
    DataCollatorForSeq2Seq,
    TrainingArguments,
    Trainer,
)
# pip install peft
from peft import LoraConfig, TaskType, get_peft_model, PeftModel
from tqdm import tqdm
import torch


# 数据加载和预处理
import json

def build_eqa_examples(path, output_path=None):
    """
    将 sentence.txt + tag.txt 转换为 LoRA 微调用的 instruction-style NER 样本
    """
    examples = []
    lens = []
    data = json.load(open(path))

    for paragraph in data['data']:
        context = paragraph['paragraphs'][0]['context']
        for qa in paragraph['paragraphs'][0]['qas']:
            # 构造 instruction 格式
            example = {
                'context': context,
                'question': qa['question'],
                'answers': {
                    'answer_start': [qa['answers'][0]['answer_start']],
                    'text': [qa['answers'][0]['text']]
                }
            }
            lens.append(len(example['context']))
            examples.append(example)

    # 保存为 JSON 格式
    if output_path:
        with open(output_path, 'w', encoding='utf-8') as f_out:
            json.dump(examples, f_out, ensure_ascii=False, indent=2)

        print(f"✅ 已生成 {len(examples)} 条样本，保存至 {output_path}")
        print(f"文本最长长度为：{max(lens)}")

    return examples

def initialize_model_and_tokenizer(model_path):
    """初始化tokenizer和模型"""
    # 加载tokenizer
    tokenizer = AutoTokenizer.from_pretrained(
        model_path,
        use_fast=False,
        trust_remote_code=True,
        local_files_only=True
    )

    # 加载模型
    model = AutoModelForCausalLM.from_pretrained(
        model_path,
        dtype=torch.float16,  # 使用半精度减少内存占用
        device_map=None,
        local_files_only=True
    )

    return tokenizer, model

def process_func(example, tokenizer):
    """
    用于 LoRA 微调大模型的抽取式问答样本预处理函数
    每个样本包含上下文 context、问题 question 和标准答案 answers
    """

    # ===== 1️⃣ 组装 prompt =====
    system_prompt = (
        "<|im_start|>system\n"
        "你是一个抽取式问答模型。请从给定的知识文本中直接抽取最符合问题的答案片段。\n"
        "如果无法从文本中找到答案，请输出：无法回答。\n"
        "<|im_end|>\n"
    )

    user_prompt = (
        "<|im_start|>user\n"
        f"知识文本：{example.get('context', '').strip()}\n"
        f"问题：{example.get('question', '').strip()}\n"
        "<|im_end|>\n"
        "<|im_start|>assistant\n"
    )

    full_prompt = system_prompt + user_prompt

    # ===== 2️⃣ 答案处理 =====
    answer_text = example.get("answers", {}).get("text", ["无法回答"])[0].strip()
    if not answer_text:
        answer_text = "无法回答"

    # ===== 3️⃣ 编码输入 =====
    model_inputs = tokenizer(
        full_prompt,
        truncation=False,           # 🚫 不截断
        padding=False,
        add_special_tokens=False,
        return_attention_mask=True,
    )

    # ===== 4️⃣ 编码输出（target）=====
    with tokenizer.as_target_tokenizer():
        labels = tokenizer(
            answer_text,
            truncation=False,        # 🚫 不截断
            padding=False,
            add_special_tokens=False,
        )

    # ===== 5️⃣ 拼接输入 + 输出 + 结束符 =====
    input_ids = model_inputs["input_ids"] + labels["input_ids"] + [tokenizer.eos_token_id]
    attention_mask = model_inputs["attention_mask"] + [1] * (len(labels["input_ids"]) + 1)

    # ===== 6️⃣ 构建 labels（屏蔽输入部分）=====
    label_ids = [-100] * len(model_inputs["input_ids"]) + labels["input_ids"] + [tokenizer.eos_token_id]

    return {
        "input_ids": input_ids,
        "attention_mask": attention_mask,
        "labels": label_ids,
    }

def setup_lora(model):
    """设置LoRA配置并应用到模型"""
    config = LoraConfig(
        task_type=TaskType.CAUSAL_LM,
        target_modules=["q_proj", "k_proj", "v_proj", "o_proj", "gate_proj", "up_proj", "down_proj"],
        inference_mode=False,
        r=8,
        lora_alpha=32,
        lora_dropout=0.1
    )

    model = get_peft_model(model, config)
    model.print_trainable_parameters()

    return model

def setup_training_args():
    """设置训练参数"""
    return TrainingArguments(
        output_dir="drive/MyDrive/week07_homework/output_Qwen1.5_eqa",
        per_device_train_batch_size=4,
        gradient_accumulation_steps=4,
        logging_steps=100,
        do_eval=True,
        eval_steps=50,
        num_train_epochs=5,
        save_steps=50,
        learning_rate=1e-4,
        save_on_each_node=True,
        gradient_checkpointing=True,
        report_to="none"  # 禁用wandb等报告工具
    )

def predict(model, tokenizer, example, device='cpu'):
    """抽取单个文本的答案"""

    formatted_text = (
        "<|im_start|>system\n"
        "你是一个抽取式问答模型。请从给定的知识文本中直接抽取最符合问题的答案片段。\n"
        "如果无法从文本中找到答案，请输出：无法回答。\n"
        "<|im_end|>\n"
        "<|im_start|>user\n"
        f"知识文本：{example['context']}\n"
        f"问题：{example['question']}\n"
        "<|im_end|>\n"
        "<|im_start|>assistant\n"
    )

    # Tokenize输入
    model_inputs = tokenizer([formatted_text], return_tensors="pt").to(device)

    # 生成预测
    with torch.no_grad():
        generated_ids = model.generate(
            model_inputs.input_ids,
            max_new_tokens=512,
            do_sample=False,
            temperature=0.2,  # 降低温度以获得更确定的输出
            pad_token_id=tokenizer.pad_token_id,
            eos_token_id=tokenizer.eos_token_id
        )

    # 提取生成的文本（去掉输入部分）
    generated_ids = generated_ids[:, model_inputs.input_ids.shape[1]:]
    response = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)[0]

    return response.strip()

def batch_predict(model, tokenizer, examples, device='cuda'):
    """批量预测测试集的意图"""
    pred_labels = []

    for example in tqdm(examples, desc="知识问答"):
        try:
            pred_label = predict(model, tokenizer, example, device)
            pred_labels.append(pred_label)
        except Exception as e:
            print(f"抽取答案 '{example}' 时出错: {e}")
            pred_labels.append("")  # 出错时添加空字符串

    return pred_labels

def main():
    """主执行函数"""
    # 1. 加载数据
    print("加载数据...")
    # 示例调用
    train_examples = build_eqa_examples("drive/MyDrive/week07_homework/cmrc2018_public/train.json",
                       "drive/MyDrive/week07_homework/cmrc2018_public/train_eqa_instruction_data.json")
    test_examples = build_eqa_examples("drive/MyDrive/week07_homework/cmrc2018_public/dev.json",
                       "drive/MyDrive/week07_homework/cmrc2018_public/test_eqa_instruction_data.json")


    # 2. 初始化模型和tokenizer
    print("初始化模型和tokenizer...")
    model_path = "drive/MyDrive/week07_homework/models/Qwen/Qwen3-0.6B"
    tokenizer, model = initialize_model_and_tokenizer(model_path)

    # 3. 处理数据
    print("处理训练数据...")
    process_func_with_tokenizer = lambda example: process_func(example, tokenizer)
    # 4. 划分训练集和验证集
    train_ds = Dataset.from_list(train_examples[:1000])
    train_tokenized = train_ds.map(process_func_with_tokenizer)
    lengths = [len(x) for x in train_tokenized["input_ids"]]
    import numpy as np

    print("样本数:", len(lengths))
    print("最大长度:", np.max(lengths))
    print("平均长度:", np.mean(lengths))
    print("中位数:", np.median(lengths))
    print("95分位数:", np.percentile(lengths, 95))

    eval_ds = Dataset.from_list(test_examples[-100:])
    eval_tokenized = eval_ds.map(process_func_with_tokenizer)

    # 5. 设置LoRA
    print("设置LoRA...")
    model.enable_input_require_grads()
    model = setup_lora(model)

    # 6. 配置训练参数
    print("配置训练参数...")
    training_args = setup_training_args()

    # 7. 创建Trainer并开始训练
    print("开始训练...")
    trainer = Trainer(
        model=model,
        args=training_args,
        train_dataset=train_tokenized,
        eval_dataset=eval_tokenized,
        data_collator=DataCollatorForSeq2Seq(
            tokenizer=tokenizer,
            padding=True,
            pad_to_multiple_of=8  # 优化GPU内存使用
        ),
    )

    trainer.train()

    # 8. 保存模型
    print("保存模型...")
    trainer.save_model()
    tokenizer.save_pretrained("drive/MyDrive/week07_homework/output_Qwen1.5_eqa")

def test_examples(examples):
    # 下载模型
    # modelscope download --model Qwen/Qwen3-0.6B  --local_dir Qwen/Qwen3-0.6B
    model_path = "drive/MyDrive/week07_homework/models/Qwen/Qwen3-0.6B"
    lora_path = "drive/MyDrive/week07_homework/output_Qwen1.5_eqa"
    tokenizer, model = initialize_model_and_tokenizer(model_path)

    # print("Tokenizer path:", tokenizer.name_or_path)
    # print("Tokenizer vocab size:", tokenizer.vocab_size)
    # print("Special tokens:", tokenizer.special_tokens_map)

    # 加载训练好的LoRA权重
    model.load_adapter("drive/MyDrive/week07_homework/output_Qwen1.5_eqa/")
    model.cpu()

    # 2️⃣ 加载 LoRA 适配器
    model = PeftModel.from_pretrained(model, lora_path)
    # print(model)

    # 3️⃣ （可选）合并权重后推理
    model = model.merge_and_unload()
    # print(model)
    # print(tokenizer.is_fast)
    # print(tokenizer.total_vocab_size)

    model.eval()
    model = model.float()
    model.cpu()

    # 测试预测
    for example in examples:
        result = predict(model, tokenizer, example)
        print(f"知识文本：{example['context']}\n")
        print(f"问题：{example['question']}\n")
        print(f"答案: {result}")

if __name__ == "__main__":

    # 执行主函数
    result_df = main()

    # 测试
    examples = build_eqa_examples("drive/MyDrive/week07_homework/cmrc2018_public/test.json")
    test_examples(examples[:5])
